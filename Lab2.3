import datetime
from enum import Enum


class Logger:
    def __init__(self, logfile):
        self.logfile = logfile

    def log(self, message):
        with open(self.logfile, 'a') as f:
            timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            f.write(f"[{timestamp}] {message}\n")


class Faculty:
    def __init__(self, name, abbr, studList, studField, graduates=None):
        self.name = name
        self.abbr = abbr
        self.studList = studList if studList is not None else []
        self.studField = studField
        self.graduates = graduates if graduates is not None else []

    def assgn(self, element, logger=None):
        self.studList.append(element)
        if logger:
            logger.log(f"Student {element.fname} {element.lname} assigned to faculty {self.name}.")

    def graduate(self, el, logger=None):
        if el in self.studList:
            self.graduates.append(el)
            self.studList.remove(el)
            if logger:
                logger.log(f"Student {el.fname} {el.lname} graduated from faculty {self.name}.")
        else:
            if logger:
                logger.log(f"Cannot graduate student {el.fname} {el.lname}: (student not found).")
            raise ValueError(f"Cannot graduate student: {el.fname} {el.lname} (student not found).")

    def __str__(self):
        return ', '.join(str(s) for s in self.studList)


class Student:
    def __init__(self, fname, lname, email, date, birth):
        self.fname = fname
        self.lname = lname
        self.email = email
        self.date = date
        self.birth = birth

    def __str__(self):
        return self.fname

    def belonging(self, fac):
        return self in fac.studList


class StudyField(Enum):
    MechE = ['INGINERIE MECANICĂ, INDUSTRIALĂ ȘI TRANSPORTURI', 'FACULTATEA CONSTRUCȚII, GEODEZIE ȘI CADASTRU']
    SoftE = ['ENERGETICĂ ȘI INGINERIE ELECTRICĂ', 'CALCULATOARE, INFORMATICĂ ȘI MICROELECTRONICĂ']
    UrbanT = ['ARHITECTURĂ']
    FoodT = ['TEHNOLOGIA ALIMENTELOR', 'ȘTIINȚE AGRICOLE ȘI SILVICE']
    VetT = ['MEDICINĂ VETERINARĂ']


class FileManager:
    def __init__(self, filename):
        self.filename = filename

    def save(self, data):
        with open(self.filename, 'w') as f:
            for fac in data['faculties']:
                f.write(f"Faculty: {fac.name},{fac.abbr},{fac.studField.name}\n")
                for stud in fac.studList:
                    f.write(f"Student: {stud.fname},{stud.lname},{stud.email},{stud.date},{stud.birth}\n")
                for grad in fac.graduates:
                    f.write(f"Graduates: {grad.fname},{grad.lname},{grad.email},{grad.date},{grad.birth}\n")
            f.write("END FACULTIES\n")

    def load(self):
        try:
            data = {'faculties': []}
            with open(self.filename, 'r') as f:
                lines = f.readlines()
                current_fac = None
                for line in lines:
                    if line.startswith("Faculty:"):
                        fac_name, fac_abbr, fac_field = line.strip().split(',')
                        current_fac = Faculty(fac_name, fac_abbr, [], StudyField[fac_field])
                        data['faculties'].append(current_fac)
                    elif line.startswith("Student:"):
                        stud_fname, stud_lname, stud_email, stud_enroll_date, stud_birth_date = line.strip().split(',')
                        current_stud = Student(stud_fname, stud_lname, stud_email,
                                               datetime.datetime.strptime(stud_enroll_date, '%Y-%m-%d %H:%M:%S'),
                                               datetime.datetime.strptime(stud_birth_date, '%Y-%m-%d %H:%M:%S'))
                        current_fac.studList.append(current_stud)
                    elif line.startswith('Graduates:'):
                        stud_fname, stud_lname, stud_email, stud_enroll_date, stud_birth_date = line.strip().split(',')
                        current_grad = Student(stud_fname, stud_lname, stud_email,
                                               datetime.datetime.strptime(stud_enroll_date, '%Y-%m-%d %H:%M:%S'),
                                               datetime.datetime.strptime(stud_birth_date, '%Y-%m-%d %H:%M:%S'))
                        current_fac.graduates.append(current_grad)
                    elif line.strip() == "END FACULTIES":
                        return data
        except FileNotFoundError:
            print("No saved data found. Starting with an empty state.")
            return {'faculties': []}


def batch_enroll(filename, faculty, logger=None):
    try:
        with open(filename, 'r') as f:
            for line in f.readlines():
                fname, lname, email, enroll_date, birth_date = line.strip().split(',')
                student = Student(fname, lname, email,
                                  datetime.datetime.strptime(enroll_date, '%Y-%m-%d'),
                                  datetime.datetime.strptime(birth_date, '%Y-%m-%d'))
                faculty.assgn(student, logger)
    except FileNotFoundError:
        print(f"File {filename} not found.")
        if logger:
            logger.log(f"Batch enrollment failed: file {filename} not found.")


def batch_graduate(filename, faculty, logger=None):
    try:
        with open(filename, 'r') as f:
            for line in f.readlines():
                fname, lname, email, enroll_date, birth_date = line.strip().split(',')
                student = Student(fname, lname, email,
                                  datetime.datetime.strptime(enroll_date, '%Y-%m-%d'),
                                  datetime.datetime.strptime(birth_date, '%Y-%m-%d'))
                try:
                    faculty.graduate(student, logger)
                except ValueError as e:
                    print(e)
    except FileNotFoundError:
        print(f"File {filename} not found.")
        if logger:
            logger.log(f"Batch graduation failed: file {filename} not found.")


if __name__ == "__main__":
    logger = Logger('operations.log')
    file_manager = FileManager('myfile.txt')

    F1 = Faculty('FCIM', 'f.c.i.m', [], StudyField.SoftE)
    logger.log(f"Faculty {F1.name} created.")

    P1 = Student('John', 'Miller', 'john@example.com', datetime.datetime(2020, 5, 17), datetime.datetime(2000, 5, 17))
    P2 = Student('Don', 'Nod', 'don@example.com', datetime.datetime(2019, 5, 17), datetime.datetime(2000, 1, 11))

    F1.assgn(P1, logger)
    F1.assgn(P2, logger)

    try:
        F1.graduate(P1, logger)
    except ValueError as e:
        print(e)

    file_manager.save({'faculties': [F1]})
    logger.log("Data saved to file.")

    data = file_manager.load()
    for fac in data['faculties']:
        for stud in fac.studList:
            print(stud)
        for grad in fac.graduates:
            print(grad)

    batch_enroll('enroll_students.txt', F1, logger)
    batch_graduate('graduate_students.txt', F1, logger)
